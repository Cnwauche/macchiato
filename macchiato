#!/usr/bin/env bash

# macchiato
# Usage:
#     macchiato [confdir] [device1] [device2] ...
#
# 'confdir' is expected to contain a bunch of .sh files, named after each network interface.
#     If not provided, will use '$(dirname "$BASH_SOURCE")/conf'
# 'deviceN' is the name of a network interface on which to apply whatever the config file says.
#     If not provided, will apply all configurations defined in 'confdir'

scriptDir=$(dirname "$BASH_SOURCE")

source "$scriptDir/wrappers.sh"

devices=()
confDir="$scriptDir/conf"
for arg; do
	if [ -d "$arg" ]; then
		confDir="$arg"
	elif deviceExists "$arg"; then
		devices+=("$arg")
	else
		echo "Don't know how to interpret argument: '$arg' - Neither a directory or a network interface."
		exit 1
	fi
done

if [ ! -d "$confDir" ]; then
	echo "Configuration directory '$confDir' does not exist."
	if [ "$#" -eq 0 ]; then # Probably first use; show something more helpful
		echo 'Is this your first time using macchiato?'
		echo 'You need to spend some time configuring it first.'
		echo 'Read the readme file for help.'
	fi
	exit 1
fi

confGlob=$(echo "$confDir"/*.sh)
if [ "$confGlob" == "$confDir/*.sh" ]; then
	echo "No configuration files found matching pattern '$confDir/*.sh'."
	exit 1
fi

if [ "${#devices[@]}" -eq 0 ]; then
	for i in "$confDir"/*.sh; do
		deviceName=$(basename "$i" | sed 's/\.sh$//')
		if deviceExists "$deviceName"; then
			devices+=("$deviceName")
		else
			echo "Configuration file '$i' found, but network interface '$deviceName' does not exist."
			exit 1
		fi
	done
else
	for device in "${devices[@]}"; do
		if [ ! -f "$confDir/$device.sh" ]; then
			echo "Interface '$device' found, but its configuration file ('$confDir/$device.sh') was not found."
			exit 1
		fi
	done
fi

for device in "${devices[@]}"; do
	ouiList=()
	ouiBlacklist=()
	source "$confDir/$device.sh"

	if [ -z "$ouiList" ]; then
		echo "'ouiList' not specified in config file."
		exit 1
	fi

	finalOuiList=()

	addOuiList() {
		local oui
		if [ ! -f "$scriptDir/oui/$1.sh" ]; then
			echo "OUI list not found in configuration: '$scriptDir/oui/$1.sh'"
			exit 1
		fi
		source "$scriptDir/oui/$1.sh"
		eval "currentList=(\"\${oui_$1[@]}\")"
		for oui in "${currentList[@]}"; do
			finalOuiList+=("$oui")
		done
	}

	if declare -p ouiList | grep -q '^declare -a'; then
		for subList in "${ouiList[@]}"; do
			addOuiList "$subList"
		done
	else
		addOuiList "$ouiList"
	fi

	getGoodOui() {
		local finalOui keepGoing blacklistedOui
		finalOui=''
		keepGoing='true'
		while [ -n "$keepGoing" ]; do
			keepGoing=''
			finalOui="$(getRandomChoice "${finalOuiList[@]}")"
			if [ -n "$ouiBlacklist" ]; then
				for blacklistedOui in "${ouiBlacklist[@]}"; do
					if [ "$blacklistedOui" == "$finalOui" ]; then
						keepGoing='true'
						break
					fi
				done
			fi
		done
		echo "$finalOui"
	}

	finalMACAddress="$(getGoodOui):$(getRandomMACEnding)"
	deviceWasUp=''
	if deviceIsUp "$device"; then
		deviceWasUp='true'
		echo "[$device] Bringing device down"
		if ! deviceBringDown "$device"; then
			echo "[$device] Failed to bring device down! Assigning a new MAC address is likely to fail as well."
		fi
	fi
	echo "[$device] Assigning spoofed MAC address: '$finalMACAddress'"
	if ! deviceSetMAC "$device" "$finalMACAddress"; then
		echo "[$device] WARNING: Failed to assign MAC address '$finalMACAddress'"
		if [ "$EUID" -ne 0 ]; then
			echo 'It looks like you are not running this script as root. You may want to change that.'
		fi
	fi
	if [ -n "$deviceWasUp" ]; then
		echo "[$device] Bringing device back up"
		if ! deviceBringUp "$device"; then
			echo "[$device] Failed to bring device back up! Network connectivity will not work until it is back up."
		fi
	fi
done
