#!/usr/bin/env bash

scriptFile="$(readlink "$BASH_SOURCE")"
scriptDir="$(dirname "$scriptFile")"

source "$scriptDir/functions.sh" || exit 1

devices=()
manualMode=''
confDir="$scriptDir/conf"
for arg; do
	if [ -d "$arg" ]; then
		confDir="$arg"
	elif deviceExists "$arg"; then
		devices+=("$arg")
	elif [ "$arg" == '-h' -o "$arg" == '--help' ]; then
		cat "$scriptDir/usage/main.usage"
		exit 0
	elif [ "$arg" == '--manual-help' ]; then
		cat "$scriptDir/usage/manual.usage"
		exit 0
	elif [ "$arg" == '--manual' ]; then
		manualMode='true'
		break
	else
		echo "Don't know how to interpret argument: '$arg'"
		exit 1
	fi
done

# finalActions is an array containing interface names.
# For every element $interface in finalActions, the following variables should be defined:
# - finalActions_devHash($interface)_ouiList: Array of names of OUI classes
# - finalActions_devHash($interface)_ouiBlacklist: Array of OUIs to not use
# This construction is to work around the fact that Bash doesn't have associative arrays.
# The devHash() is there because interface names may contain dashes and other weird characters.
# devHash is a function defined in functions.sh.
finalActions=()

if [ -n "$manualMode" ]; then
	# Skip all arguments before --manual
	while [ "$1" != '--manual' ]; do
		shift
	done
	shift # Skip --manual itself
	# I really wish getopts was better
	if [ "$#" == 0 ]; then
		echo 'Must specify device as first argument.'
		echo "Use '--manual-help' for usage information."
		exit 1
	fi
	manualDevice="$1"
	if ! deviceExists "$manualDevice"; then
		echo "Interface '$manualDevice' doesn't exist."
		exit 1
	fi
	shift
	ouiList=()
	ouiBlacklist=()
	while [ "$#" -gt 0 ]; do
		if [ "$1" == '-o' -o "$1" == '--oui-class' ]; then
			if [ "$#" -lt 2 ]; then
				echo "Must specify a class after '$1'."
				exit 1
			fi
			ouiList+=("$2")
			shift
		elif [ "$1" == '-b' -o "$1" == '--blacklist' ]; then
			if [ "$#" -lt 2 ]; then
				echo "Must specify an OUI after '$1'."
				exit 1
			fi
			ouiBlacklist+=("$2")
			shift
		fi
		shift
	done
	if [ "${#ouiList[@]}" -eq 0 ]; then
		echo 'Must specify at least one OUI class.'
		echo "Use '--manual-help' for usage information."
		exit 1
	fi
	finalActions+=("$manualDevice")
	eval "finalActions_$(devHash "$manualDevice")_ouiList=(\"\${ouiList[@]}\")"
	eval "finalActions_$(devHash "$manualDevice")_ouiBlacklist=(\"\${ouiBlacklist[@]}\")"
else
	if [ ! -d "$confDir" ]; then
		echo "Configuration directory '$confDir' does not exist."
		if [ "$#" -eq 0 ]; then # Probably first use; show something more helpful
			echo 'Is this your first time using macchiato?'
			echo 'You need to spend some time configuring it first.'
			echo 'Read the README file for help.'
		fi
		exit 1
	fi
	confGlob=$(echo "$confDir"/*.sh)
	if [ "$confGlob" == "$confDir/*.sh" ]; then
		echo "No configuration files found matching pattern '$confDir/*.sh'."
		exit 1
	fi
	# deviceMap is an associative array mapping interface names to the config file that should be used for them
	declare -A deviceMap
	for device in "${devices[@]}"; do
		if ! deviceExists "$device"; then
			echo "Interface '$device' doesn't exist."
			exit 1
		else
			if [ -f "$confDir/$device.sh" ]; then
				deviceMap["$device"]="$confDir/$device.sh"
			elif [ -f "$confDir/_default.sh.sh" ]; then
				deviceMap["$device"]="$confDir/_default.sh"
			else
				echo "Interface '$device' found, but its configuration file ('$confDir/$device.sh') was not found."
				echo "A default configuration file ('$confDir/_default.sh') was not found either."
				exit 1
			fi
		fi
	done
	if [ "${#devices[@]}" -eq 0 ]; then # No devices specified on command line; apply to all devices
		for device in $(getDevicesList); do
			if [ -f "$confDir/$device.sh" ]; then
				deviceMap["$device"]="$confDir/$device.sh"
			elif [ -f "$confDir/_default.sh" ]; then
				deviceMap["$device"]="$confDir/_default.sh"
			fi
		done
		if [ "${#deviceMap[@]}" -eq 0 ]; then
			echo 'Nothing to do; exitting.'
			exit 0
		fi
	fi
	for device in "${!deviceMap[@]}"; do
		ouiList=()
		ouiBlacklist=()
		source "${deviceMap[$device]}"
		if [ "$dontTouch" == 'true' ]; then
			echo "[$device] Skipping interface (dontTouch = true)."
			continue
		fi
		if [ -z "$ouiList" ]; then
			echo "[$device] 'ouiList' not specified in config file: '${deviceMap[$device]}'."
			exit 1
		fi
		finalActions+=("$device")
		manualDeviceHash=""
		eval "finalActions_$(devHash "$device")_ouiList=(\"\${ouiList[@]}\")"
		eval "finalActions_$(devHash "$device")_ouiBlacklist=(\"\${ouiBlacklist[@]}\")"
	done
fi

for device in "${finalActions[@]}"; do
	eval "ouiList=(\"\${finalActions_$(devHash "$device")_ouiList[@]}\")"
	eval "ouiBlacklist=(\"\${finalActions_$(devHash "$device")_ouiBlacklist[@]}\")"

	# Turn OUI blacklist to lowercase and to use :'s instead of -'s
	# in order to normalize them so that later on we can compare them directly
	normalOuiBlacklist=()
	for oui in "${ouiBlacklist[@]}"; do
		normalOuiBlacklist+=("$(echo "$oui" | tr '[:upper:]' '[:lower:]' | sed 's/-/:/g')")
	done

	finalOuiList=()
	addOuiList() {
		local oui
		if [ ! -f "$scriptDir/oui/$1.sh" ]; then
			echo "[$device] OUI list '$1' not found in configuration: '$scriptDir/oui/$1.sh'"
			exit 1
		fi
		source "$scriptDir/oui/$1.sh"
		eval "currentList=(\"\${oui_$1[@]}\")"
		for oui in "${currentList[@]}"; do
			finalOuiList+=("$oui")
		done
	}

	if declare -p ouiList | grep -q '^declare -a'; then
		for subList in "${ouiList[@]}"; do
			addOuiList "$subList"
		done
	else
		addOuiList "$ouiList"
	fi

	getGoodOui() {
		local finalOui keepGoing blacklistedOui
		finalOui=''
		keepGoing='true'
		while [ -n "$keepGoing" ]; do
			keepGoing=''
			finalOui="$(getRandomChoice "${finalOuiList[@]}")"
			if [ "${#normalOuiBlacklist[@]}" -gt 0 ]; then
				for blacklistedOui in "${normalOuiBlacklist[@]}"; do
					if [ "$blacklistedOui" == "$finalOui" ]; then
						keepGoing='true'
						break
					fi
				done
			fi
		done
		echo "$finalOui"
	}

	finalMACAddress="$(getGoodOui):$(getRandomMACEnding)"
	deviceWasUp=''
	if deviceIsUp "$device"; then
		deviceWasUp='true'
		echo "[$device] Bringing device down"
		if ! deviceBringDown "$device"; then
			echo "[$device] Failed to bring device down! Assigning a new MAC address is likely to fail as well."
		fi
	fi
	echo "[$device] Assigning spoofed MAC address: '$finalMACAddress'"
	if ! deviceSetMAC "$device" "$finalMACAddress"; then
		echo "[$device] WARNING: Failed to assign MAC address '$finalMACAddress'"
		if [ "$EUID" -ne 0 ]; then
			echo 'It looks like you are not running this script as root. You may want to change that.'
		fi
	fi
	if [ -n "$deviceWasUp" ]; then
		echo "[$device] Bringing device back up"
		if ! deviceBringUp "$device"; then
			echo "[$device] Failed to bring device back up! Network connectivity will not work until it is back up."
		fi
	fi
done
