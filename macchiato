#!/usr/bin/env bash

scriptDir=$(dirname "$BASH_SOURCE")

source "$scriptDir/functions.sh" || exit 1

devices=()
confDir="$scriptDir/conf"
for arg; do
	if [ -d "$arg" ]; then
		confDir="$arg"
	elif deviceExists "$arg"; then
		devices+=("$arg")
	elif [ "$arg" == '-h' -o "$arg" == '--help' ]; then
		echo 'Usage:'
		echo '    macchiato [confdir] [[interface1] [interface2] ...]'
		echo ''
		echo 'macchiato is generally not meant to be called directly.'
		echo 'Read the README file for complete usage information.'
		exit 0
	else
		echo "Don't know how to interpret argument: '$arg' - Neither a directory or a network interface."
		exit 1
	fi
done

if [ ! -d "$confDir" ]; then
	echo "Configuration directory '$confDir' does not exist."
	if [ "$#" -eq 0 ]; then # Probably first use; show something more helpful
		echo 'Is this your first time using macchiato?'
		echo 'You need to spend some time configuring it first.'
		echo 'Read the README file for help.'
	fi
	exit 1
fi

confGlob=$(echo "$confDir"/*.sh)
if [ "$confGlob" == "$confDir/*.sh" ]; then
	echo "No configuration files found matching pattern '$confDir/*.sh'."
	exit 1
fi

declare -A deviceMap

for device in "${devices[@]}"; do
	if ! deviceExists "$device"; then
		echo "Interface '$device' doesn't exist."
		exit 1
	else
		if [ -f "$confDir/$device.sh" ]; then
			deviceMap["$device"]="$confDir/$device.sh"
		elif [ -f "$confDir/_default.sh.sh" ]; then
			deviceMap["$device"]="$confDir/_default.sh"
		else
			echo "Interface '$device' found, but its configuration file ('$confDir/$device.sh') was not found."
			echo "A default configuration file ('$confDir/_default.sh') was not found either."
			exit 1
		fi
	fi
done

if [ "${#devices[@]}" -eq 0 ]; then # No devices specified on command line; apply to all devices
	for device in $(getDevicesList); do
		if [ -f "$confDir/$device.sh" ]; then
			deviceMap["$device"]="$confDir/$device.sh"
		elif [ -f "$confDir/_default.sh" ]; then
			deviceMap["$device"]="$confDir/_default.sh"
		fi
	done
	if [ "${#deviceMap[@]}" -eq 0 ]; then
		echo 'Nothing to do; exitting.'
		exit 0
	fi
fi

for device in "${!deviceMap[@]}"; do
	ouiList=()
	ouiBlacklist=()
	source "${deviceMap[$device]}"

	if [ "$dontTouch" == 'true' ]; then
		echo "[$device] Skipping interface (dontTouch = true)."
		continue
	fi

	if [ -z "$ouiList" ]; then
		echo "[$device] 'ouiList' not specified in config file: '${deviceMap[$device]}'."
		exit 1
	fi

	finalOuiList=()

	addOuiList() {
		local oui
		if [ ! -f "$scriptDir/oui/$1.sh" ]; then
			echo "[$device] OUI list '$1' not found in configuration: '$scriptDir/oui/$1.sh'"
			exit 1
		fi
		source "$scriptDir/oui/$1.sh"
		eval "currentList=(\"\${oui_$1[@]}\")"
		for oui in "${currentList[@]}"; do
			finalOuiList+=("$oui")
		done
	}

	if declare -p ouiList | grep -q '^declare -a'; then
		for subList in "${ouiList[@]}"; do
			addOuiList "$subList"
		done
	else
		addOuiList "$ouiList"
	fi

	getGoodOui() {
		local finalOui keepGoing blacklistedOui
		finalOui=''
		keepGoing='true'
		while [ -n "$keepGoing" ]; do
			keepGoing=''
			finalOui="$(getRandomChoice "${finalOuiList[@]}")"
			if [ -n "$ouiBlacklist" ]; then
				for blacklistedOui in "${ouiBlacklist[@]}"; do
					if [ "$blacklistedOui" == "$finalOui" ]; then
						keepGoing='true'
						break
					fi
				done
			fi
		done
		echo "$finalOui"
	}

	finalMACAddress="$(getGoodOui):$(getRandomMACEnding)"
	deviceWasUp=''
	if deviceIsUp "$device"; then
		deviceWasUp='true'
		echo "[$device] Bringing device down"
		if ! deviceBringDown "$device"; then
			echo "[$device] Failed to bring device down! Assigning a new MAC address is likely to fail as well."
		fi
	fi
	echo "[$device] Assigning spoofed MAC address: '$finalMACAddress'"
	if ! deviceSetMAC "$device" "$finalMACAddress"; then
		echo "[$device] WARNING: Failed to assign MAC address '$finalMACAddress'"
		if [ "$EUID" -ne 0 ]; then
			echo 'It looks like you are not running this script as root. You may want to change that.'
		fi
	fi
	if [ -n "$deviceWasUp" ]; then
		echo "[$device] Bringing device back up"
		if ! deviceBringUp "$device"; then
			echo "[$device] Failed to bring device back up! Network connectivity will not work until it is back up."
		fi
	fi
done
